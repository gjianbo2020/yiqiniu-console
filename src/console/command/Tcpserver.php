<?php

namespace yiqiniu\console\command;

use Swoole\Process;
use think\console\input\Argument;
use think\console\input\Option;
use think\facade\Config;
use think\facade\Env;
use think\swoole\command\Swoole;

class Tcpserver extends Swoole
{
    public function configure()
    {
        $this->setName('swoole:tcpserver')
            ->addArgument('action', Argument::OPTIONAL, "start|stop|restart|reload", 'start')
            ->addOption('host', 'H', Option::VALUE_OPTIONAL, 'the host of swoole server.', null)
            ->addOption('port', 'p', Option::VALUE_OPTIONAL, 'the port of swoole server.', null)
            ->addOption('daemon', 'd', Option::VALUE_NONE, 'Run the swoole server in daemon mode.')
            ->setDescription('Swoole TcpSocketServer for ThinkPHP');
    }

    public function getName()
    {
        return parent::getName(); // TODO: Change the autogenerated stub
    }

    protected function init()
    {
        $conf_path = app()->getConfigPath();
        if (file_exists($conf_path . '/swoole_tcpserver.php')) {
            $this->config = Config::pull('swoole_tcpserver');
        } else {
            $base_server_file = $conf_path . '/swoole_server.php';
            if (file_exists($base_server_file)) {
                $content = file_get_contents($base_server_file);
                file_put_contents($conf_path . '/swoole_tcpserver.php',
                    str_replace("'socket'", "'tcp'", $content)
                );
                $this->config = Config::pull('swoole_tcpserver');
            }
        }
        if (empty($this->config) || empty($this->config['swoole_class'])) {
            throw new \LogicException('configure file "swoole_class" not empty,must inherit "\tpext\swoole\BaseSocket" ');
        }


        if (empty($this->config['pid_file'])) {
            $this->config['pid_file'] = Env::get('runtime_path') . 'swoole_server.pid';
        }

        // 避免pid混乱
        $this->config['pid_file'] .= '_' . $this->getPort();
    }

    /**
     * 启动server
     * @access protected
     * @return void
     */
    protected function start()
    {
        $pid = $this->getMasterPid();

        if ($this->isRunning($pid)) {
            $this->output->writeln('<error>swoole server process is already running.</error>');
            return false;
        }

        $this->output->writeln('Starting swoole server...');

        $host = $this->getHost();
        $port = $this->getPort();
        $type = !empty($this->config['type']) ? $this->config['type'] : 'tcp';
        $mode = !empty($this->config['mode']) ? $this->config['mode'] : SWOOLE_PROCESS;
        $sockType = !empty($this->config['sock_type']) ? $this->config['sock_type'] : SWOOLE_SOCK_TCP;

        if (!empty($this->config['swoole_class'])) {
            $class = $this->config['swoole_class'];
            if (class_exists($class)) {
                $swoole_obj = new $class($host, $port, $mode, $sockType);
                $swoole = $swoole_obj->swoole;
            }

        } else {
            switch ($type) {
                case 'socket':
                    $swooleClass = 'Swoole\Websocket\Server';
                    break;
                case 'http':
                    $swooleClass = 'Swoole\Http\Server';
                    break;
                default:
                    $swooleClass = 'Swoole\Server';
            }

            $swoole = new $swooleClass($host, $port, $mode, $sockType);

            // 开启守护进程模式
        }

        if ($this->input->hasOption('daemon')) {
            $this->config['daemonize'] = true;
        }

        foreach ($this->config as $name => $val) {
            if (0 === strpos($name, 'on')) {
                $swoole->on(substr($name, 2), $val);
                unset($this->config[$name]);
            }
        }

        // 设置服务器参数
        $swoole->set($this->config);

        $this->output->writeln("Swoole {$type} server started: <{$host}:{$port}>");
        $this->output->writeln('You can exit with <info>`CTRL-C`</info>');

        // 启动服务
        $swoole->start();
    }

    /**
     * 柔性重启server
     * @access protected
     * @return void
     */
    protected function reload()
    {
        // 柔性重启使用管理PID
        $pid = $this->getMasterPid();

        if (!$this->isRunning($pid)) {
            $this->output->writeln('<error>no swoole server process running.</error>');
            return false;
        }

        $this->output->writeln('Reloading swoole server...');
        Process::kill($pid, SIGUSR1);
        $this->output->writeln('> success');
    }

    /**
     * 停止server
     * @access protected
     * @return void
     */
    protected function stop()
    {
        $pid = $this->getMasterPid();

        if (!$this->isRunning($pid)) {
            $this->output->writeln('<error>no swoole server process running.</error>');
            return false;
        }

        $this->output->writeln('Stopping swoole server...');

        Process::kill($pid, SIGTERM);
        $this->removePid();

        $this->output->writeln('> success');
    }
}
